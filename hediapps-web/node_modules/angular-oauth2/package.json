{
  "_args": [
    [
      {
        "raw": "angular-oauth2",
        "scope": null,
        "escapedName": "angular-oauth2",
        "name": "angular-oauth2",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Hedi\\workspace\\hediapps-web"
    ]
  ],
  "_from": "angular-oauth2@latest",
  "_id": "angular-oauth2@4.1.1",
  "_inCache": true,
  "_location": "/angular-oauth2",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/angular-oauth2-4.1.1.tgz_1491220336462_0.8923340919427574"
  },
  "_npmUser": {
    "name": "penso",
    "email": "rui.penso@gmail.com"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "angular-oauth2",
    "scope": null,
    "escapedName": "angular-oauth2",
    "name": "angular-oauth2",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/angular-oauth2/-/angular-oauth2-4.1.1.tgz",
  "_shasum": "81106311a01987e277cf56441d4b5fa81c2a1dc7",
  "_shrinkwrap": null,
  "_spec": "angular-oauth2",
  "_where": "C:\\Users\\Hedi\\workspace\\hediapps-web",
  "author": {
    "name": "Seegno",
    "email": "projects@seegno.com"
  },
  "bugs": {
    "url": "https://github.com/seegno/angular-oauth2/issues"
  },
  "dependencies": {
    "angular": "1.5.9",
    "angular-cookies": "1.5.9",
    "query-string": "^1.0.0"
  },
  "description": "Angular OAuth2",
  "devDependencies": {
    "angular-mocks": "1.5.9",
    "github-changes": "^1.0.0",
    "gulp": "^3.8.10",
    "gulp-babel": "^5.3.0",
    "gulp-concat": "^2.4.3",
    "gulp-header": "^1.2.2",
    "gulp-jshint": "^1.9.0",
    "gulp-rename": "^1.2.0",
    "gulp-uglify": "^1.0.2",
    "gulp-wrap-umd": "^0.2.1",
    "jshint-stylish": "^1.0.0",
    "karma": "^0.13.0",
    "karma-browserify": "^2.0.0",
    "karma-chrome-launcher": "^0.1.7",
    "karma-firefox-launcher": "^0.1.4",
    "karma-mocha": "^0.1.10",
    "karma-mocha-reporter": "^0.3.1",
    "karma-should": "0.0.1",
    "karma-sinon": "^1.0.4",
    "lodash": "^4.0.0",
    "mocha": "^2.4.5",
    "should": "^4.6.0",
    "sinon": "^1.17.3",
    "yargs": "^3.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "81106311a01987e277cf56441d4b5fa81c2a1dc7",
    "tarball": "https://registry.npmjs.org/angular-oauth2/-/angular-oauth2-4.1.1.tgz"
  },
  "gitHead": "e90bd56a8362be46a8d3ecc9320bd03176ce1e75",
  "homepage": "https://github.com/seegno/angular-oauth2",
  "keywords": [
    "AngularJS",
    "Authentication",
    "OAuth2"
  ],
  "license": "MIT",
  "main": "./dist/angular-oauth2.js",
  "maintainers": [
    {
      "name": "penso",
      "email": "rui.penso@gmail.com"
    }
  ],
  "name": "angular-oauth2",
  "optionalDependencies": {},
  "readme": "# angular-oauth2 [![Build Status](https://travis-ci.org/seegno/angular-oauth2.svg)](https://travis-ci.org/seegno/angular-oauth2)\n\nAngularJS OAuth2 authentication module written in ES6.\n\nCurrently `angular-oauth2` only uses the [Resouce Owner Password Credential Grant](https://tools.ietf.org/html/rfc6749#section-4.3), i.e, using a credentials combination (username, password), we'll request an access token (using `grant_type='password'`) which, in case of success, will typically return a response such as:\n\n```\n{\n  \"access_token\": \"foobar\",\n  \"token_type\": \"Bearer\",\n  \"expires_in\": 3600,\n  \"refresh_token\": \"foobiz\"\n}\n```\nInternally we'll automatically store it as a cookie and it will be used in every request adding an `Authorization` header: `Authorization: 'Bearer foobar'`.\n\n---\n\n## Installation\n\nChoose your preferred method:\n\n* Bower: `bower install angular-oauth2`\n* NPM: `npm install --save angular-oauth2`\n* Download: [angular-oauth2](https://raw.github.com/seegno/angular-oauth2/master/dist/angular-oauth2.min.js)\n\n## Usage\n\n###### 1. Download `angular-oauth2` dependencies.\n\n* [angular](https://github.com/angular/bower-angular)\n* [angular-cookies](https://github.com/angular/bower-angular-cookies)\n* [query-string](https://github.com/sindresorhus/query-string)\n\nIf you're using `bower` they will be automatically downloaded upon installing this library.\n\n###### 2. Include `angular-oauth2` and dependencies.\n\n```html\n<script src=\"<VENDOR_FOLDER>/angular/angular.min.js\"></script>\n<script src=\"<VENDOR_FOLDER>/angular-cookies/angular-cookies.min.js\"></script>\n<script src=\"<VENDOR_FOLDER>/query-string/query-string.js\"></script>\n<script src=\"<VENDOR_FOLDER>/angular-oauth2/dist/angular-oauth2.min.js\"></script>\n```\n\n###### 3. Configure `OAuth` (optional) and `OAuthToken` (optional):\n\n```js\nangular.module('myApp', ['angular-oauth2'])\n  .config(['OAuthProvider', function(OAuthProvider) {\n    OAuthProvider.configure({\n      baseUrl: 'https://api.website.com',\n      clientId: 'CLIENT_ID',\n      clientSecret: 'CLIENT_SECRET' // optional\n    });\n  }]);\n```\n\nYou can also configure `OAuth` service in a `.run()` block, in case you retrieve the Oauth server configuration from a ajax request.\n\n```js\nangular.module('myApp', ['angular-oauth2'])\n  .run(['OAuth', function(OAuth) {\n    OAuth.configure({\n      baseUrl: 'https://api.website.com',\n      clientId: 'CLIENT_ID',\n      clientSecret: 'CLIENT_SECRET' // optional\n    });\n  }]);\n```\n\n###### 4. Catch `OAuth` errors and do something with them (optional):\n\n```js\nangular.module('myApp', ['angular-oauth2'])\n  .run(['$rootScope', '$window', 'OAuth', function($rootScope, $window, OAuth) {\n    $rootScope.$on('oauth:error', function(event, rejection) {\n      // Ignore `invalid_grant` error - should be catched on `LoginController`.\n      if ('invalid_grant' === rejection.data.error) {\n        return;\n      }\n\n      // Refresh token when a `invalid_token` error occurs.\n      if ('invalid_token' === rejection.data.error) {\n        return OAuth.getRefreshToken();\n      }\n\n      // Redirect to `/login` with the `error_reason`.\n      return $window.location.href = '/login?error_reason=' + rejection.data.error;\n    });\n  }]);\n```\n\n## API\n\n#### OAuthProvider\n\nConfiguration defaults:\n\n```js\nOAuthProvider.configure({\n  baseUrl: null,\n  clientId: null,\n  clientSecret: null,\n  grantPath: '/oauth2/token',\n  revokePath: '/oauth2/revoke'\n});\n```\n\n#### OAuth\n\nUpdate configuration defaults:\n\n```js\nOAuth.configure({\n  baseUrl: null,\n  clientId: null,\n  clientSecret: null,\n  grantPath: '/oauth2/token',\n  revokePath: '/oauth2/revoke'\n});\n\n```\nCheck authentication status:\n\n```js\n/**\n * Verifies if the `user` is authenticated or not based on the `token`\n * cookie.\n *\n * @return {boolean}\n */\n\nOAuth.isAuthenticated();\n```\n\nGet an access token:\n\n```js\n/**\n * Retrieves the `access_token` and stores the `response.data` on cookies\n * using the `OAuthToken`.\n *\n * @param {object} user - Object with `username` and `password` properties.\n * @param {object} config - Optional configuration object sent to `POST`.\n * @return {promise} A response promise.\n */\n\nOAuth.getAccessToken(user, options);\n```\n\nRefresh access token:\n\n```js\n/**\n * Retrieves the `refresh_token` and stores the `response.data` on cookies\n * using the `OAuthToken`.\n *\n * @return {promise} A response promise.\n */\n\nOAuth.getRefreshToken()\n```\n\nRevoke access token:\n\n```js\n/**\n * Revokes the `token` and removes the stored `token` from cookies\n * using the `OAuthToken`.\n *\n * @return {promise} A response promise.\n */\n\nOAuth.revokeToken()\n```\n\n**NOTE**: An *event* `oauth:error` will be sent everytime a `responseError` is emitted:\n\n* `{ status: 400, data: { error: 'invalid_request' }`\n* `{ status: 400, data: { error: 'invalid_grant' }`\n* `{ status: 401, data: { error: 'invalid_token' }`\n* `{ status: 401, headers: { 'www-authenticate': 'Bearer realm=\"example\"' } }`\n\n#### OAuthTokenProvider\n\n`OAuthTokenProvider` uses [angular-cookies](https://github.com/angular/bower-angular-cookies) to store the cookies. Check the [available options](https://code.angularjs.org/1.4.0/docs/api/ngCookies/service/$cookies).\n\nConfiguration defaults:\n\n```js\nOAuthTokenProvider.configure({\n  name: 'token',\n  options: {\n    secure: true\n  }\n});\n```\n\n#### OAuthToken\n\nIf you want to manage the `token` yourself you can use `OAuthToken` service.\nPlease check the [OAuthToken](https://github.com/seegno/angular-oauth2/blob/master/src/providers/oauth-token-provider.js#L45) source code to see all the available methods.\n\n## Contributing & Development\n\n#### Contribute\n\nFound a bug or want to suggest something? Take a look first on the current and closed [issues](https://github.com/seegno/angular-oauth2/issues). If it is something new, please [submit an issue](https://github.com/seegno/angular-oauth2/issues/new).\n\n#### Develop\n\nIt will be awesome if you can help us evolve `angular-oauth2`. Want to help?\n\n1. [Fork it](https://github.com/seegno/angular-oauth2).\n2. `npm install`.\n3. Do your magic.\n4. Run the tests: `gulp test`.\n5. Build: `gulp build`\n6. Create a [Pull Request](https://github.com/seegno/angular-oauth2/compare).\n\n*The source files are written in ES6.*\n\n## Reference\n\n* http://tools.ietf.org/html/rfc2617\n* http://tools.ietf.org/html/rfc6749\n* http://tools.ietf.org/html/rfc6750\n* https://tools.ietf.org/html/rfc7009\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/seegno/angular-oauth2.git"
  },
  "scripts": {
    "changelog": "github-changes -o oauthjs -r angular-oauth2 -a --only-pulls --use-commit-body --title 'Changelog' --date-format '/ YYYY-MM-DD'",
    "test": "gulp test --browsers Firefox"
  },
  "version": "4.1.1"
}
